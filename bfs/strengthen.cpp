#include <bits/stdc++.h>
using namespace std;
int min(int a,int b){
    return b<a?b:a;
}
int solve(int A, vector<vector<int>> &B, int C) {
    vector<bool> visited(A + 1, false);
    vector<vector<int>> adj(A + 1);
    vector<int> edg;
    
    // Build adjacency list
    for (vector<int>& v : B) {
        adj[v[0]].push_back(v[1]);
        adj[v[1]].push_back(v[0]);
    }
    
    // Find all connected components
    for (int i = 1; i <= A; i++) {
        if (!visited[i]) {
            int edges = 0;
            visited[i] = true;
            queue<int> q;
            q.push(i);
            
            // BFS to explore the component
            while (!q.empty()) {
                int node = q.front();
                q.pop();
                for (int neighbor : adj[node]) {
                    edges++;
                    if (!visited[neighbor]) {
                        visited[neighbor] = true;
                        q.push(neighbor);
                    }
                }
            }
            edges /= 2;  // Each edge is counted twice
            if (edges > 0) {
                edg.push_back(edges);
            }
        }
    }
    
    C++; 
    sort(edg.begin(), edg.end(), greater<int>());
    // cout<<'s'<<edg.size()<<endl;
    // for(int x : edg)
    //     cout<<x<<" ";
    // cout<<endl;
    int ans = min(C,edg.size()-1);
    size_t i = 0;
    while (i < edg.size() && C-- > 0) {
        ans += edg[i++];
    }
    
    ans += C; 
    return ans;
}

int main() {
    
     vector<vector<int>> v={
  {490, 292},
  {571, 57},
  {325, 380},
  {355, 236},
  {431, 393},
  {505, 237},
  {203, 69},
  {456, 110},
  {249, 456},
  {479, 440},
  {477, 447},
  {453, 345},
  {121, 35},
  {231, 402},
  {607, 172},
  {157, 161},
  {10, 128},
  {128, 156},
  {478, 465},
  {544, 24},
  {241, 2},
  {352, 85},
  {565, 337},
  {364, 388},
  {431, 536},
  {97, 401},
  {111, 443},
  {205, 339},
  {380, 444},
  {157, 177},
  {535, 61},
  {124, 570},
  {317, 52},
  {19, 118},
  {354, 448},
  {505, 256},
  {340, 481},
  {442, 330},
  {44, 291},
  {2, 408},
  {589, 286},
  {77, 211},
  {342, 38},
  {283, 400},
  {551, 296},
  {304, 334},
  {195, 341},
  {326, 61},
  {313, 150},
  {305, 609},
  {236, 390},
  {595, 325},
  {616, 86},
  {492, 582},
  {434, 285},
  {266, 141},
  {507, 372},
  {525, 359},
  {581, 85},
  {23, 208},
  {279, 112},
  {552, 482},
  {171, 483},
  {180, 566},
  {436, 28},
  {256, 317},
  {468, 398},
  {396, 271},
  {269, 511},
  {146, 67},
  {206, 196},
  {41, 164},
  {384, 219},
  {545, 158},
  {281, 285},
  {164, 350},
  {460, 302},
  {565, 136},
  {427, 28},
  {351, 261},
  {71, 27},
  {595, 470},
  {593, 550},
  {377, 62},
  {231, 514},
  {211, 149},
  {568, 18},
  {365, 212},
  {332, 160},
  {576, 489},
  {580, 419},
  {119, 79},
  {78, 605},
  {551, 307},
  {185, 155},
  {442, 571},
  {140, 384},
  {348, 257},
  {500, 436},
  {130, 61},
  {105, 493},
  {105, 262},
  {74, 77},
  {420, 457},
  {313, 518},
  {550, 334},
  {422, 607},
  {465, 585},
  {358, 549},
  {492, 24},
  {226, 105},
  {538, 302},
  {31, 292},
  {155, 400},
  {64, 520},
  {246, 315},
  {394, 243},
  {86, 95},
  {172, 325},
  {125, 576},
  {48, 261},
  {606, 390},
  {150, 105},
  {38, 498},
  {430, 303},
  {253, 366},
  {120, 345},
  {484, 217},
  {97, 556},
  {167, 308},
  {481, 92},
  {201, 560},
  {352, 50},
  {76, 587},
  {114, 516},
  {482, 346},
  {386, 240},
  {315, 383},
  {442, 306},
  {304, 444},
  {46, 267},
  {598, 374},
  {202, 496},
  {503, 251},
  {400, 199},
  {152, 550},
  {38, 380},
  {564, 385},
  {373, 426},
  {108, 63},
  {181, 286},
  {161, 97},
  {333, 560},
  {52, 374},
  {549, 374},
  {428, 567},
  {452, 317},
  {91, 328},
  {521, 144},
  {319, 434},
  {561, 277},
  {227, 496},
  {147, 300},
  {499, 210},
  {450, 6},
  {435, 172},
  {64, 569},
  {103, 353},
  {212, 242},
  {23, 584},
  {576, 571},
  {424, 216},
  {42, 200},
  {455, 289},
  {147, 38},
  {266, 527},
  {121, 218},
  {174, 46},
  {408, 13},
  {456, 384},
  {46, 522},
  {64, 308},
  {539, 246},
  {259, 81},
  {331, 469},
  {541, 374},
  {485, 118},
  {378, 301},
  {394, 145},
  {166, 66},
  {570, 143},
  {205, 251},
  {418, 597},
  {294, 439},
  {105, 510},
  {71, 152},
  {37, 379},
  {176, 108},
  {307, 153},
  {352, 37},
  {463, 277},
  {313, 73},
  {291, 510},
  {34, 447},
  {444, 14},
  {467, 505},
  {415, 266},
  {602, 289},
  {211, 448},
  {279, 560},
  {520, 279},
  {420, 454},
  {38, 323},
  {337, 385},
  {453, 88},
  {222, 589},
  {142, 221},
  {444, 48},
  {467, 493},
  {267, 212},
  {28, 441},
  {380, 439},
  {560, 184},
  {161, 308},
  {156, 529},
  {516, 302},
  {170, 385},
  {72, 276},
  {529, 43},
  {608, 157},
  {149, 155},
  {384, 320},
  {196, 229},
  {269, 49},
  {431, 446},
  {616, 587},
  {578, 596},
  {465, 320},
  {389, 321},
  {373, 331},
  {458, 31},
  {8, 241},
  {525, 444},
  {276, 502},
  {264, 31},
  {262, 191},
  {419, 136},
  {393, 310},
  {552, 156},
  {54, 302},
  {31, 118},
  {144, 410},
  {391, 576},
  {549, 600},
  {377, 545},
  {505, 333},
  {514, 395},
  {41, 294},
  {457, 456},
  {385, 250},
  {577, 416},
  {371, 206},
  {530, 187},
  {348, 340},
  {188, 134},
  {336, 299},
  {501, 215},
  {161, 140},
  {258, 456},
  {545, 445},
  {131, 504},
  {590, 119},
  {446, 36},
  {504, 433},
  {293, 20},
  {58, 131},
  {81, 594},
  {535, 586},
  {499, 353},
  {207, 44},
  {559, 470},
  {257, 381},
  {376, 211},
  {440, 197},
  {319, 181},
  {40, 108},
  {413, 560},
  {296, 50},
  {266, 147},
  {159, 308

},
  {309, 38},
  {449, 553},
  {523, 22},
  {370, 226},
  {98, 310},
  {532, 110},
  {523, 378},
  {196, 473},
  {326, 576},
  {282, 393},
  {563, 74},
  {35, 211},
  {234, 540},
  {143, 510},
  {494, 597},
  {81, 210},
  {584, 337},
  {327, 102},
  {299, 154},
  {17, 524},
  {333, 380},
  {315, 505},
  {19, 287},
  {566, 304},
  {64, 47},
  {109, 434},
  {324, 349},
  {54, 487},
  {351, 262},
  {239, 101},
  {585, 610},
  {495, 351},
  {450, 211},
  {439, 583},
  {593, 95},
  {485, 290},
  {85, 585},
  {301, 546},
  {220, 537},
  {365, 258},
  {231, 3},
  {95, 12},
  {448, 363},
  {60, 208},
  {479, 106},
  {533, 260},
  {324, 213},
  {159, 445},
  {251, 191},
  {18, 210},
  {171, 251},
  {255, 329},
  {205, 102},
  {58, 510},
  {238, 400},
  {442, 417},
  {563, 174},
  {486, 155},
  {602, 234},
  {294, 248},
  {597, 559},
  {353, 371},
  {393, 441},
  {456, 506},
  {231, 123},
  {240, 542},
  {299, 191},
  {221, 239},
  {519, 531},
  {387, 463},
  {614, 523},
  {597, 151},
  {191, 23},
  {178, 588},
  {45, 134},
  {66, 202},
  {105, 34},
  {62, 458},
  {423, 199},
  {240, 531},
  {381, 558},
  {16, 552},
  {298, 571},
  {73, 392},
  {462, 214},
  {133, 520},
  {126, 602},
  {367, 176},
  {338, 373},
  {10, 276},
  {272, 134},
  {99, 189},
  {154, 305},
  {88, 296},
  {177, 189},
  {265, 584},
  {71, 171},
  {520, 446},
  {485, 217},
  {351, 87},
  {477, 337},
  {181, 396},
  {552, 450},
  {262, 208},
  {275, 568},
  {338, 127},
  {543, 245},
  {136, 44},
  {583, 216},
  {434, 140},
  {95, 586},
  {237, 575},
  {365, 339},
  {310, 431},
  {136, 380},
  {604, 172},
  {55, 270},
  {259, 259},
  {372, 30},
  {182, 66},
  {33, 444},
  {224, 143},
  {398, 326},
  {48, 196},
  {547, 433},
  {194, 479},
  {265, 42},
  {74, 39},
  {142, 306},
  {199, 232},
  {13, 225},
  {165, 513},
  {339, 399},
  {300, 155},
  {241, 484},
  {510, 455},
  {80, 95},
  {261, 40},
  {589, 501},
  {70, 27},
  {127, 428},
  {48, 229},
  {114, 582},
  {543, 573},
  {257, 308},
  {148, 308},
  {227, 388},
  {410, 264},
  {444, 616},
  {515, 25},
  {271, 148},
  {443, 267},
  {2, 474},
  {497, 398},
  {223, 24},
  {393, 258},
  {41, 128},
  {119, 197},
  {484, 97},
  {491, 598},
  {182, 522},
  {367, 5},
  {268, 600},
  {191, 581},
  {452, 290},
  {86, 506},
  {428, 73},
  {278, 388},
  {133, 291},
  {237, 396},
  {141, 31},
  {562, 355},
  {259, 356},
  {223, 468},
  {214, 45}
};
    cout<<solve(616, v, 30);
    
    return 0;
}
